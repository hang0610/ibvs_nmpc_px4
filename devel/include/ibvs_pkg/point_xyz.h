// Generated by gencpp from file ibvs_pkg/point_xyz.msg
// DO NOT EDIT!


#ifndef IBVS_PKG_MESSAGE_POINT_XYZ_H
#define IBVS_PKG_MESSAGE_POINT_XYZ_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ibvs_pkg
{
template <class ContainerAllocator>
struct point_xyz_
{
  typedef point_xyz_<ContainerAllocator> Type;

  point_xyz_()
    : header()
    , p1_x(0.0)
    , p1_y(0.0)
    , p1_z(0.0)
    , p2_x(0.0)
    , p2_y(0.0)
    , p2_z(0.0)
    , p3_x(0.0)
    , p3_y(0.0)
    , p3_z(0.0)
    , p4_x(0.0)
    , p4_y(0.0)
    , p4_z(0.0)  {
    }
  point_xyz_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , p1_x(0.0)
    , p1_y(0.0)
    , p1_z(0.0)
    , p2_x(0.0)
    , p2_y(0.0)
    , p2_z(0.0)
    , p3_x(0.0)
    , p3_y(0.0)
    , p3_z(0.0)
    , p4_x(0.0)
    , p4_y(0.0)
    , p4_z(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _p1_x_type;
  _p1_x_type p1_x;

   typedef float _p1_y_type;
  _p1_y_type p1_y;

   typedef float _p1_z_type;
  _p1_z_type p1_z;

   typedef float _p2_x_type;
  _p2_x_type p2_x;

   typedef float _p2_y_type;
  _p2_y_type p2_y;

   typedef float _p2_z_type;
  _p2_z_type p2_z;

   typedef float _p3_x_type;
  _p3_x_type p3_x;

   typedef float _p3_y_type;
  _p3_y_type p3_y;

   typedef float _p3_z_type;
  _p3_z_type p3_z;

   typedef float _p4_x_type;
  _p4_x_type p4_x;

   typedef float _p4_y_type;
  _p4_y_type p4_y;

   typedef float _p4_z_type;
  _p4_z_type p4_z;





  typedef boost::shared_ptr< ::ibvs_pkg::point_xyz_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ibvs_pkg::point_xyz_<ContainerAllocator> const> ConstPtr;

}; // struct point_xyz_

typedef ::ibvs_pkg::point_xyz_<std::allocator<void> > point_xyz;

typedef boost::shared_ptr< ::ibvs_pkg::point_xyz > point_xyzPtr;
typedef boost::shared_ptr< ::ibvs_pkg::point_xyz const> point_xyzConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ibvs_pkg::point_xyz_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ibvs_pkg::point_xyz_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ibvs_pkg::point_xyz_<ContainerAllocator1> & lhs, const ::ibvs_pkg::point_xyz_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.p1_x == rhs.p1_x &&
    lhs.p1_y == rhs.p1_y &&
    lhs.p1_z == rhs.p1_z &&
    lhs.p2_x == rhs.p2_x &&
    lhs.p2_y == rhs.p2_y &&
    lhs.p2_z == rhs.p2_z &&
    lhs.p3_x == rhs.p3_x &&
    lhs.p3_y == rhs.p3_y &&
    lhs.p3_z == rhs.p3_z &&
    lhs.p4_x == rhs.p4_x &&
    lhs.p4_y == rhs.p4_y &&
    lhs.p4_z == rhs.p4_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ibvs_pkg::point_xyz_<ContainerAllocator1> & lhs, const ::ibvs_pkg::point_xyz_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ibvs_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ibvs_pkg::point_xyz_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ibvs_pkg::point_xyz_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ibvs_pkg::point_xyz_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ibvs_pkg::point_xyz_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibvs_pkg::point_xyz_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibvs_pkg::point_xyz_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ibvs_pkg::point_xyz_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3fec7e78a909523b59777fdf937fe045";
  }

  static const char* value(const ::ibvs_pkg::point_xyz_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3fec7e78a909523bULL;
  static const uint64_t static_value2 = 0x59777fdf937fe045ULL;
};

template<class ContainerAllocator>
struct DataType< ::ibvs_pkg::point_xyz_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ibvs_pkg/point_xyz";
  }

  static const char* value(const ::ibvs_pkg::point_xyz_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ibvs_pkg::point_xyz_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"float32 p1_x\n"
"float32 p1_y\n"
"float32 p1_z\n"
"float32 p2_x\n"
"float32 p2_y\n"
"float32 p2_z\n"
"float32 p3_x\n"
"float32 p3_y\n"
"float32 p3_z\n"
"float32 p4_x\n"
"float32 p4_y\n"
"float32 p4_z\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ibvs_pkg::point_xyz_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ibvs_pkg::point_xyz_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.p1_x);
      stream.next(m.p1_y);
      stream.next(m.p1_z);
      stream.next(m.p2_x);
      stream.next(m.p2_y);
      stream.next(m.p2_z);
      stream.next(m.p3_x);
      stream.next(m.p3_y);
      stream.next(m.p3_z);
      stream.next(m.p4_x);
      stream.next(m.p4_y);
      stream.next(m.p4_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct point_xyz_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ibvs_pkg::point_xyz_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ibvs_pkg::point_xyz_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "p1_x: ";
    Printer<float>::stream(s, indent + "  ", v.p1_x);
    s << indent << "p1_y: ";
    Printer<float>::stream(s, indent + "  ", v.p1_y);
    s << indent << "p1_z: ";
    Printer<float>::stream(s, indent + "  ", v.p1_z);
    s << indent << "p2_x: ";
    Printer<float>::stream(s, indent + "  ", v.p2_x);
    s << indent << "p2_y: ";
    Printer<float>::stream(s, indent + "  ", v.p2_y);
    s << indent << "p2_z: ";
    Printer<float>::stream(s, indent + "  ", v.p2_z);
    s << indent << "p3_x: ";
    Printer<float>::stream(s, indent + "  ", v.p3_x);
    s << indent << "p3_y: ";
    Printer<float>::stream(s, indent + "  ", v.p3_y);
    s << indent << "p3_z: ";
    Printer<float>::stream(s, indent + "  ", v.p3_z);
    s << indent << "p4_x: ";
    Printer<float>::stream(s, indent + "  ", v.p4_x);
    s << indent << "p4_y: ";
    Printer<float>::stream(s, indent + "  ", v.p4_y);
    s << indent << "p4_z: ";
    Printer<float>::stream(s, indent + "  ", v.p4_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IBVS_PKG_MESSAGE_POINT_XYZ_H
